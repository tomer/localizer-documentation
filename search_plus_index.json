{"./":{"url":"./","title":"Introduction","keywords":"","body":"Documentation for Mozilla localizers This repository includes several documents describing topics of interest for localizers at Mozilla. If you’re reading these pages on GitHub, a version with improved readability and search capabilities is available here. Table of contents Products How to localize and test Mozilla products: Firefox for desktop. Firefox for Android. Firefox for iOS. Focus for Android and iOS. Mozilla.org. Tools How to use Pontoon. Mercurial tips. Web Projects Web projects Other topics Testing localization of Mozilla projects. How to contribute We use GitHub issues to track missing documentation and updates to existing pages. In order to contribute, open a pull request in the repository, adding the new file or updating an existing document. Make sure to follow these style guidelines, and note that all pull requests need to be reviewed before merge. GitBook is used to generate these pages: it’s run automatically via Travis and content pushed to the gh-pages branch. If you want content to be available in GitBook, make sure to include a link in SUMMARY.md. "},"products/firefox_desktop/":{"url":"products/firefox_desktop/","title":"Firefox for desktop","keywords":"","body":"L10n and Firefox for desktop Some documentation specific for common tasks regarding Firefox desktop and l10n: How to test Firefox on desktop. "},"products/firefox_desktop/testing.html":{"url":"products/firefox_desktop/testing.html","title":"How to test","keywords":"","body":"Testing Firefox Desktop Which build should I test? As a localizer you will work against Nightly, which means you should be testing a localized build of Firefox Nightly provided directly by Mozilla. You can download the build from the pre-release download page, the download page for all systems and locales, or directly via FTP (search for your locale code and operative system). Why Nightly? Because it’s updated every day, which means that you can fix an error and verify if the correction was effective the day after. It’s definitely a good approach to use this version as your main browser. At the same time, you, or someone in your team, should be testing also Beta and Release, to make sure updates don’t introduce issues. How to test Here are some tips on how to test Firefox once installed in your computer. Create a new profile From time to time create a new profile: To test that the default searchplugins are still relevant and work as expected. To check messages and pages displayed on first run. To test dialogs and preferences at the default size. Search for untranslated strings Open all the voices available in the main menu and check that they’re properly localized. If you opted to keep Developer Tools in English, the choice should be consistent across the browser. Check the “hamburger” menu for cut strings (unfortunately you’ll need to abbreviate some of them, if they’re not intelligible). Then choose to customize the menu and make sure everything is properly localized. Open Preferences/Options and navigate through all tabs, try to open all dialogs like Exceptions…. Make also sure to select the Custom settings option for History in the Privacy panel. Log in with you Firefox Account and make sure that all preferences and dialogs are properly localized. Check for untranslated strings and errors in the Library (Bookmarks->View all bookmarks…). Open a new Private Window and check the content of the page. Type about:support in the address bar, press Enter, and check for errors or missing translations. Check the error pages for malware, unwanted software, deceptive website, harmful website. All strings are also visible in about:blocked. Check permissions dialogs on this test website. Visit secure and unsecure website, and check the i panel near the URL. Right click on a page and verify all panels in the View Page Info dialog. Testing webextension permissions dialog Create a new profile and open about:config in your browser: Right click on the list of available keys and create a new boolean key extensions.webextPermissionPrompts set to true. Search for the key xpinstall.signatures.required and set it to false. This will allow installing unsigned add-ons. Open this link, select Download and save the file on your computer. Drag the .xpi file on your browser’s window to display the dialog (you don’t need to actually install it). Test accesskeys and shortcuts You can test accesskeys only on Windows and Linux, since they’re not available in OS X. If your locale uses a non Latin alphabet and opted to keep the English accesskeys, you don’t have anything to check. If you’re localizing accesskeys, you should check that: Accesskeys use letters available in the associated label, and are not displayed between parenthesis at the end of the label itself. There are no conflicts, which means there are no items in the same menu or preference panel using the same letter. Starting from Firefox 56, it’s not possible to avoid conflicts in preferences: the guideline in that case is to reduce to a minimum the number of times the same letter is used within a panel. For shortcuts, you should test at least the most common ones. You should never change a shortcut, unless that combination of keys is not available in the keyboard layout commonly used for your locale. For example, in the Italian keyboard the character [ is available pressing Alt and è. A shortcut based on Shift + [ would never work, because it would be read as Alt + Shift + è. Test the installer on windows Download the installer version and make sure that everything is working correctly. In the FTP folder you have both the Full Installer and the Stub Installer (downloading the package from Internet). You should test both at least once., Photon Photon is the redesigned UI that will ship in Firefox 57: The hamburger menu will be replaced by a static dropdown menu. If you’re on Nightly and still see the old menu, make sure that browser.photon.structure.enabled is set to true in about:config (that’s the default value in Nightly 56 and later). Test the Overflow menu: the >> symbol will appear automatically in the main toolbar when resizing the window to a small width. You can then pin an element to it, or add/remove items from the toolbar directly from their context menu. Test the onboarding tour by clicking the small fox displayed in the left corner on the New tab. There are also onboarding notifications, displayed at the bottom of the page: you can cycle through them by opening multiple new tabs in a row. Note that the onboarding is currently not compatible with Activity Stream. "},"products/firefox_android/":{"url":"products/firefox_android/","title":"Firefox for Android","keywords":"","body":"L10n and Firefox for Android Some documentation specific for common tasks regarding Firefox for Android and l10n: How to localize Firefox for Android. How to test Firefox for Android. "},"products/firefox_android/how_to_localize.html":{"url":"products/firefox_android/how_to_localize.html","title":"How to localize","keywords":"","body":"Firefox for Android - How to localize The release cycle for Firefox for Android is the same as Firefox for Desktop, which is generally 6 weeks - but can sometimes be 8 weeks. You can see the detailed schedule for each release here. Merge day is when localizations move to the next train - and the last day available to include localization updates to the next Beta version if you work on tools like Pontoon. Note: please make sure that you’ve already localized mozilla.org before you start working on Firefox for Android or any other projects. The importance of regularly checking your dashboard Checking for errors Please keep in mind during your entire localization process to regularly check your locale’s team page. You can just choose your locale from the list there, and bookmark it to easily access it in the future. Once you are on your team page, under the section Application & Sign-offs, take a look at the Translation Status column. If you have any errors, they will show up in red there. The number of missing strings will also appear in that same column. You can click on either of these links to see what’s going on behind these notifications. If you notice any errors, they need to be fixed very quickly. This is extremely important because if you break something while your locale is shipping on multi-locale builds (so, the builds that actually ship on the Play Store), you will need to fix it as soon as possible since it breaks the build for everyone! Checking for warnings You should also be checking your locale’s Firefox for Android dashboard for any possible warnings. They would appear under the Warnings column. If you see you have a warning, then click on the Status column on that same line. It will explain where the warning is so you can go in and fix it. Checking your team page and dashboard regularly should be something you do from the very beginning when you start localizing a project, so that it becomes a habit. This helps reduce the chance of breaking the builds in the future, once your locale is actually shipping, and generally helps catch errors earlier on. It also gives you an overview of your locale’s health and status, and overall ensures you’re shipping a good quality localization. Localize the Firefox for Android folder Pontoon: choose your locale code from there. Once you’ve finished covering this folder, please note you still have strings to translate. See below for more instructions. Localize the shared Firefox strings In order to reach 100% completion on the Firefox for Android l10n project, you will have to localize the shared Firefox files (so, the ones common to Firefox Desktop and Android) as well. These are found in the Firefox folder: Pontoon: choose your locale code from there. Localize all file paths that start with dom, netwerk, security, services and toolkit. Once you’ve reached 100% completion for the shared strings: let the Fennec project manager know (currently delphine at mozilla dot com). A bug will be filed to add your locale to the single-locale builds. These builds are available here: https://ftp.mozilla.org/pub/mobile/nightly/latest-mozilla-central-android-api-15-l10n/. This means that you will be able to download a build on your Android device to test your locale. Please note that at this point, your locale still isn’t shipping on official Firefox for Android builds. That will come later. Considerations for brand new locales that have no Desktop version yet If you have not already launched Firefox Desktop in your language, then you are probably missing some important pieces, such as search engines. Bugs will need to be filed by l10n-drivers, and done by following filing out the form here: https://l10n.mozilla.org/bugs/new-locale Please read this document for more details on how to add search plugins. Once you have finished localization work on Android and your locale is up on single-locale builds, you may now move to the testing phase. "},"products/firefox_android/testing.html":{"url":"products/firefox_android/testing.html","title":"How to test","keywords":"","body":"Testing Firefox for Android Testing on single-locale builds Once you have localized all the strings needed to complete the Firefox for Android project, and your language is now up on single-locale builds, you should start testing! This is the moment to engage as much people as possible: have them use and check-out these builds regularly. The more eyes on them, the better. First, authorize 3rd party app downloads from your Android phone’s settings. From your phone, download your locale from https://ftp.mozilla.org/pub/mobile/nightly/latest-mozilla-central-android-api-16-l10n/ by clicking on the most recent link with your locale code in it (Note: you may want to scroll down the page to make sure you are choosing the most recent build!) Then, choose the .apk link out of the 3 possible options listed. Download should start and once the app is installed, you should be able to test your locale. What to look out for? Language quality. Truncated words (cut-off from screen). Anything that appears broken on the UI. Check out at all the main screens, UI, menus, tabs, new features, etc. Make sure these all look good, that everything is properly translated and appears as expected. Font support. Check that all searchplugins are working correctly. It is strongly suggested to start using these builds on a daily basis, so that you can get into as many screens as possible and check that everything looks fine. It is important that the people testing the localization be not only the one(s) who have localized. Ask other people from your community to help test in order to have fresh eyes looking at your work. Testing on multi-locale builds (shipping in Play Store) Once the Fennec Project Manager (currently delphine at mozilla dot com) sees that you’ve done at least one cycle on a single-locale build, that nothing breaks during sign-offs, that you’ve continued keeping your work up to date, and that you have been TESTING it - l10n-drivers will consider adding your language to the multi-locale builds. This means that - congratulations! - your locale will now officially be shipping on Firefox for Android. Once your locale is added to the multi-locale builds, it will “ride the trains” like for Firefox Desktop. It will first start shipping on Nightly on the Play Store, then once next merge day arrives it will ship on Beta, and again the following merge day, it will arrive on Release (cycles are usually 6 or 8 weeks). You can check all upcoming merge days on the Rapid Release Calendar. Once you start shipping in the Play Store, it makes sense to stop testing on single-locale builds. It’s strongly suggested you now start testing and using the Nightly Play Store version, since this is the branch that you localize and work on. Don’t be fooled by the aurora in that URL: the existing package ID for Aurora was re-used for Fennec Nightly builds shipping on Play Store. Note that it’s good to have other members in the community use the beta and release version too, in case anything breaks with updates. When testing the multi-locale build, keep in mind and look out for the same issues and aspects called out for the single-locale builds in the section above. l10n-drivers send out regular reminders about merge days, android updates, schedule and important info on dev.l10n mailing list. Please make sure you’re following this list closely so that you get regular updates about which part of the cycle you’re at, when you need to finish your work, and anything relevant to what you are doing. "},"products/firefox_ios/":{"url":"products/firefox_ios/","title":"Firefox for iOS","keywords":"","body":"L10n and Firefox for iOS Some documentation specific for common tasks regarding Firefox for iOS and l10n: Adding new iOS locales. How to test Firefox for iOS. "},"products/firefox_ios/adding_new_ios_locale.html":{"url":"products/firefox_ios/adding_new_ios_locale.html","title":"Adding a new locale","keywords":"","body":"Adding a new locale to Firefox for iOS Prerequisites iOS language support iOS currently supports two tiers of locales, and a locale must be part of that list in order to ship on Firefox for iOS. Unlike Firefox for Android, there’s no locale switcher included in the app, so it’s possible to ship only locales that are supported by iOS. Note that for Tier 2 locales, some menu items in Firefox for iOS can not be translated since they are part of the OS itself. Strings will unfortunately appear in English on the final UI in these cases. To tell if a locale is supported or not, it is also possible simply to take a look on an actual device, under the Language Settings of the most recent iOS version available. Tier one locales are the ones listed under “iPod/iPhone/iPad Language”, and Tier 2 locales appear under “Other Language” (or “Add Language” if there are already some languages under that list). If a locale appears under none of these two lists, then it should be safe to assume the language is not supported by iOS. Note though that RTL languages are not supported yet on Firefox for iOS (see RTL point below). App Store language support The App Store only supports a subset of locales, compared to what the OS itself supports. This list is always growing. If translation work starts on Firefox for iOS for a locale that is supported by the App Store, it will automatically be enabled under the locale’s corresponding appstore’s folder (which can be found either in Pontoon or GitHub). Note that App Store language support is not a requirement to translate the app itself. As long as a locale is supported by iOS (see point above), it’s possible to ship it. Right-to-left locales At the time there is no right-to-left support on Firefox for iOS. Stay tuned. In the meantime, feel free to file any existing issues in Bugzilla and make sure it blocks the RTL Firefox for iOS meta bug. To get involved in the Firefox for iOS RTL effort and receive more details, you may contact directly delphine at mozilla dot com. Request to add a localization Once it is determined if a locale is supported by the operating system and can ship on Firefox for iOS, a request can be made to work on the project through the usual localization tools. For Pontoon, go to the Firefox for iOS project page here, and click on the link to request to add a new language to the project. It’s also possible to work directly from GitHub on the Firefox for iOS mozilla-l10n repo. Shipping Once pending localization work is complete for a given release, l10n-drivers will work on adding the locale to the list of shipping locales. Remember to regularly check the Firefox for iOS release schedule as well as the dev.l10n mailing list for latest information and updates on the project. "},"products/firefox_ios/testing.html":{"url":"products/firefox_ios/testing.html","title":"How to test","keywords":"","body":"Testing on iOS for a new release Localizers currently mostly rely on screenshots for testing. Latest information and updates about testing are provided on the dev.l10n mailing list, which you should follow if you are working on l10n for any of the existing Mozilla products. Testing with screenshots Screenshots are currently provided by the iOS team on dev.l10n, and the latest iterations can be found right here. Test builds While there are testing builds available on Test Flight, the process is currently manual and localizers should reach out to the l10n mobile PM in order to be added to these builds (currently delphine at mozilla dot com). Please note you will need an iOS device running v9 or above. Aspects to review Here is a list of issues you should try to identify when testing the build: Language quality. Truncated words (cut-off from screen). Anything that appears broken on the UI. Check out at all the main screens, UI, menus, tabs, new features, etc. Make sure these all look good, that everything is properly translated and appears as expected. Font support. Untranslated content. Concerning untranslated content: please note that we currently have two tiers of support in iOS. If your locale is only in the Tier 2 support list, then it sometimes happens that menu items, which are part of the OS itself, may not be localizable - and will therefore unfortunately appear in English on the final UI. To tell if a locale is supported or not, simply take a look on an actual device, under the Language Settings of the most recent iOS version available. Tier 1 locales are the ones listed under “iPod/iPhone/iPad Language”, and Tier 2 locales appear under “Other Language” (or “Add Language” if there are already some languages under that list). Testing a brand new locale When a locale is brand new, l10n-drivers and the localization team will work through Bugzilla to process sign-offs on l10n testing. The l10n Mobile Project Manager will open up a meta bug for this and attach all needed bugs under their corresponding component. Closing the bug as resolved-fixed will signal that a locale is signing off on testing, and good to go for release. Details concerning all this process are always announced on the dev.l10n mailing list. "},"products/focus/":{"url":"products/focus/","title":"Focus","keywords":"","body":"L10n and Focus for iOS and Android Some documentation specific for common tasks regarding Focus for iOS and Android: How to test Focus. "},"products/focus/testing_focus.html":{"url":"products/focus/testing_focus.html","title":"How to test","keywords":"","body":"Testing on Focus for iOS and Focus for Android for a new release Given Focus for iOS and Focus for Android have very similar test procedures, this document will cover both at once. Localizers currently mostly rely on screenshots for testing. Latest information and updates about testing are provided on the dev-l10n mailing list, which you should follow if you are working on l10n for any of the existing Mozilla products. Testing with screenshots Screenshots are provided by the mobile teams and sent out on dev-l10n. The latest iterations can be found here: Focus for Android. Focus for iOS (iPhone5) and Focus for iOS (iPhone7) screenshots are currently on hold and will be back up soon. Test builds While there are testing builds available via BuddyBuilds, the process is currently manual and localizers should reach out to the l10n mobile project manager in order to be added to these builds (currently delphine at mozilla dot com). For Focus for iOS, please note an iOS device running v9 or above is needed. There is no specified version needed for Android. There are Beta builds available for Focus Android now, that can be found by scrolling to the bottom of the Focus for Android Play Store listing. Aspects to review Here is a list of issues you should try to identify when testing the build: Language quality. Truncated words (cut-off from screen). Anything that appears broken on the UI. Check out all the main screens, UI, menus, tabs, new features, etc. Make sure these all look good, that everything is properly translated and appears as expected. Font support: once you start translating, you should check against the screenshots provided that the fonts used appear correctly. Untranslated content. Concerning untranslated content on Focus for iOS: please note that we currently have two tiers of support in iOS. If your locale is only in the Tier 2 support (which corresponds to the languages under Other Languages in the iOS system settings), then it sometimes happens that menu items and dialogs, which are part of the OS itself, may not be localizable - and will therefore unfortunately appear in the primary OS language on the final UI. Locale sign-offs L10n-drivers and the localization team will work together to determine if a locale can ship or not, for each release. For mobile app projects (so all except Firefox for Android), all locales with complete translations and without errors on the web dashboard at l10n deadline are considered for shipping. Additionally, they must have no visible l10n errors upon review of the locale’s screenshots (e.g., significant truncation, text overflow, encoding, etc.) besides what may have already been reported to the mobile team to correct. Focus for Android issues can be filed here. Focus for iOS issues can be filed here. Details concerning all this process are always announced on the dev-l10n mailing list. "},"products/mozilla_org/":{"url":"products/mozilla_org/","title":"Mozilla.org","keywords":"","body":"Working on mozilla.org Some documentation specific for common tasks on mozilla.org How to test mozilla.org. "},"products/mozilla_org/testing.html":{"url":"products/mozilla_org/testing.html","title":"How to test","keywords":"","body":"Testing Mozilla.org Mozilla.org is highly visible because the site houses the basic info of all Mozilla products, conveys Mozilla’s mission, vision, and values it stands for. Additionally, it promotes initiatives and campaigns in time of these events. The localized versions reach 60% of the Mozilla users globally. It is very important that, not only the main pages are localized, they are thoroughly tested before they are launched on production. Key links Production: https://www.mozilla.org/{locale_code}/ Staging: https://www-dev.allizom.org/{locale_code}/ Repository: https://github.com/mozilla-l10n/www.mozilla.org/ Pontoon: https://pontoon.mozilla.org/projects/mozillaorg/ Web dashboard: https://l10n.mozilla-community.org/webdashboard/?locale={locale_code}. Visit this page on a regular basis to check localization progress, pending work, deadline, and errors that were introduced during translation. It’s highly advised you to ask other community members to conduct peer review not only on Pontoon, but on staging. While not all the languages are required for certain projects, each community can opt in the projects at a later time. What to test Pre-l10n test Have your glossary available as a reference, select mozilla.org as Repository, your language as your Target Locale. For terminology consistency, reference the product or site that the page is for, assuming the product or site is localized (e.g.: Firefox, Test Pilot). Have the matching US page up as reference, though some strings may not be identical due to A/B testing. Have the project you just localized available for editing in Pontoon. Linguistic testing Translation quality in context. Grammar correctness in context. Truncation: button text should remain inside the button. Header line break wraps at proper place. Text not overlapping graphic. Terminology consistent with product, and among web pages. Brand names remain in English. Product names comply to Mozilla guideline and adhere to what the community has agreed to. No corrupted characters. Click on the links on the page, which should take you to the pages of the same language if they are localized, or they will be redirected to en-US if the pages are not.. Nav bar terms consistent with the page titles they are linked to (except when Nav bar term is shortened due to space limitation). Footer links don’t overlap with one another. You can make linguistic changes directly in Pontoon or GitHub. Functionality testing Click the download link, you should be able to download the product in your language, if it is localized, such as Firefox. Font support and readability. Footer: verify that the translation of the link is coherent and the link is functional. Language list: is your language listed as one of the options? Check https://www-dev.allizom.org/en-US to confirm. Error page: deliberately type a broken link, such as https://www.mozilla.org/firefox/neu/, check whether 404 page is localized. If your language is RTL, make sure that the page layout and text flow in the correct directions. Compatibility testing: Test the page layout in other major browsers and on other platforms. Test the page layout on the leading locally developed browser if available. Test the page layout on mobile devices of major platforms. When can I see the localized page on the production server? Updated translations are pushed to the production server almost daily. When a brand new page is available for localization, it won’t be enabled in production until it’s fully localized. When existing pages receive updates with new strings, this new content won’t be displayed on production until localized, to avoid displaying a mix of English and localized text. In some cases pages receive major updates that require a complete rewrite of the template: if this happens, the old template is kept online only for a short period of time and, when removed, it will cause the URL to redirect users to the English version. Sync and update frequencies Pontoon syncs every 20 minutes to the repository. Web Dashboard and the Dev server update every 15 minutes. If you work on Pontoon, it is safe to say that it will take less than an hour to see your changes reflected on the dashboard and the dev server. When a project has a firm deadline to meet, it will be communicated through the dev-l10n-web mailing list. Be sure to sign up so you receive important community wide information on web related projects. Testing dynamic pages This section focuses on instructions for testing pages with dynamically generated content. Each page or topic is different in terms of steps or flow. These instructions could change over time to reflect product design updates. Linguistic testing is the main focus. The instrutions below are detailed steps to get to the localized content so it can be reviewed in context. firefox/desktop/tips.lang Click on the next or back link to check out the tips on different features. Highlighted text is the same as in English. Text fits inside the box. firefox/new/horizon.lang Once page is loaded, click on the link called Download Firefox for another platform. For alternative message, change URL to Scene2. To fully review the Firefox download page messages, tests must go through following scenarios:. Desktop: Windows, macOS, Linux. Mobile: Android and iOS. Updating from older version of Firefox to the latest vs. downloading for the first time. firefox/sendto.lang The test can be done for all locales only on staging. For production testing, only these locales are enabled: de, en-GB, en-ZA, es-AR, es-CL, es-ES, es-MX, fr, id, pl, pt-BR, and ru. Enter a mobile phone number, a new page will be generated, suggesting the next action to take. Enter a phone number in the wrong phone number format. This will prompt an error message. firefox/tracking-protection-tour.lang Open Firefox and start a New Private Window. Once the window is launched, click on See how it works button. You are taken to step one. Click the Next button, it takes you to steps two and three. In step three, an extra text box appears. Click on Disable protection for this session button to generate a new “step three” message. Click on Enable protection button to toggle between enable and disable protection messages. NOTE: in order to see the message of Disable protection for this site, the browser must be in normal mode. Click on Got it! button to get to the next page. Click on Restart tour button to go through the above steps. mozorg/about/history.lang The slides should automatically scroll to the next in about 10 seconds or so. If it does not or it stops, click the next or previous arrows to go to the next slide. Be sure to cycle through until you see the first slide again to ensure you have covered all the slides. Text fits inside the box. mozorg/about/manifesto.lang You can check out the principles of the manifesto without going to the slide mode. However, only in the slide mode, all the localized content can be reviewed. Click on the first principle. Click on the “next” and the “previous” arrows to move from one slide to the next. Check on text layout, alignment and wrapping. Box size should be adjustable to fit all the content. "},"products/l10n_testing.html":{"url":"products/l10n_testing.html","title":"Testing localization of Mozilla projects","keywords":"","body":"Testing localization of Mozilla projects Mozilla encourages a three-stage review process: Linguistic review in Pontoon by community. Technical review by l10n-drivers. In-context localization testing by community and users. Other documents will cover how the Mozilla approach to the first two stages of the review process. This document covers what to look for when performing in-context localization testing for a Mozilla product or Web project. Localization testing process Each Mozilla project has its own process for taking your translations and making them available for you to test. Generally speaking, the process moves like this: You submit a translation through Pontoon or directly to version control (Mercurial, GitHub). The translation goes through a linguistic review and a technical review. Once approved, the translation is automatically pushed into the project’s repository. Depending on the project, you’ll need to wait anywhere from 30 minutes to 24 hours to look for your translation in the Mozilla project. Once you’ve found your translation, if you see a problem with it, you return to Pontoon to make any necessary corrections. Pontoon simplifies these steps for some Web projects by enabling the in-context editor (aka WYSIWYG editor). This allows you to see your translations in-context the moment you create them in Pontoon, cutting out the 30 minutes to 24 hours waiting period to test. Most projects do not have this enabled, however, so it is still important to know the typical testing process for your projects. You might be wondering, “what sort of problems am I supposed to be looking for when I test?” Good question :-) Here’s a list of common localization bugs with screenshots that illustrate the problems in context. Common localization bugs Encoding and fonts Character encoding errors occur when the browser can’t find the correct symbol to display for a character. Normally, you will recognize these errors when you see Unicode replacement characters (�), or strange glyphs, instead of letters or radicals in your language. In some cases the problem can be resolved by changing your browser’s default encoding, in other cases the problem is due to the website not serving content with the right encoding and can be fixed only by the website’s owner. Fonts that do not include full support for a language’s set of glyphs can present similar issues, for example showing incorrect line spacing (leading), character spacing (kerning), or missing ligatures between characters. In the example below, the kerning of the Cherokee letters is too wide. This may be fixed by using a different font on the site. Truncation Truncation happens when a translation is too long to fit in its corresponding space in the user interface. This error can cause problems with transmitting the right meaning to the user by hiding part of the translation from view. It can be corrected in one of two ways: The developer increases the UI space to accommodate longer translations. The localizer creates a shorter translation that captures the primary message but may not capture secondary or tertiary messages. String reuse String reuse occurs when the same string is used in different contexts, and it represents a poor approach to localization. Consider for example a string like Add to bookmarks: developers might consider a good idea to reuse the same string for both a button label and button tooltip, since it works fine for English. On the other hand, other languages might have completely different needs for these two contexts: while the button indicates an action (imperative verb), the tooltip is used to describe the action associated to the UI element and might need a sentence using a verb with the third person, and the element itself as implicit subject. String concatenation and empty strings String concatenation occurs when a developer takes one string, splits it into multiple strings, and tells the code to display these strings one after another. This is often used to overcome technical limitations, like including a link in the middle of a sentence without exposing HTML tags to localization and injecting unsafe HTML in the UI. Empty strings are also common when creating a sentence with a link. Tipically 3 strings are used: before_link + link + after_link. English doesn’t need the part before or after the link, but that’s useful for other languages, so they’re kept empty in English. It’s expected for some locales to have a completely different behavior than English. UI layout Translated text often requires more space than the same text in the source language. For example, when translating between English and German, it’s common practice to expect a length increase of 30%. This can cause problems as wrapping text elements cause different parts of the user interface move around to accommodate a longer string. To fix this, the translator often needs to create a new, shorter translation that captures the primary meaning, but might lose some of the secondary or tertiary meaning. Mistranslation Mistranslation occurs when meaning is lost between the source language and the target language. This can be caused accidentally by a lack of context for where a translation will be placed within a user interface (very common in software localization), a translator’s lack of subject matter expertise, or intentionally due to user interface text constraints (e.g., truncation). Untranslated strings Untranslated strings appear in a user interface when developers don’t include that string in the string resource files available for localization, but instead in their code. It’s a practice called hardcoding. The best way to correct this error is to make sure that Pontoon does not contain the string for translation (or that it’s not in the string resource files) and then contact developers using Bugzilla to make the string available for localization. Style bugs Mozilla’s official style guide serves as a primer to help communities create their own style guides. Style errors are when the tone or appearance of a translation does not match the tone or appearance described in a style guide. These can be corrected by making sure that localizers understand the style guide rules and follow them when translating. Numbers, date, currency Every language and region displays numbers, dates, and currency differently. These errors occur when the user sees an incorrect number format, date format, or currency for the language and region of their localized Firefox. This can be fixed by filing a bug in Bugzilla. XML parsing errors XML parsing errors (aka “the yellow screen of death”) cause Firefox to display a yellow error page. This is often due to a broken translated string in that localization of Firefox which causes the Firefox build to break. With l20n, these errors will no longer be relevant. Exposed variables and placeholders Variables and placeholders become exposed in the user interface when the translated string has a typo within the variable or placeholder. Because it is not exactly the variable that the software or website expected to find, the system simply displays the variable rather than its value. A very common example of this is with the variable &brandShortName. If that variable is typed correctly in the translation, it will return the variable’s value (in this case, it’s Firefox). If it contains a typo, the user will see the variable instead (e.g., &brandshortname). These are discoverable in the Mozilla localization dashboards and can be corrected in Pontoon. Broken access keys Access keys are less effective when the same key is assigned to multiple functions within the same scope (menu, preference panel, etc.). Additionally, if the access key uses a letter not available in the label, it’s displayed near the label between parentheses. Multiple identical access keys in the same context (preference menu, toolbar menu) will require the user to press the letter twice to use it. Ideally, repetitions should be avoided, but that’s not possible in some places, e.g. the reorganized preferences shipping with Firefox 56 and later. It’s possible to see a list of access keys using letters not available in the associated label in your Firefox localization by looking at this page in Transvision for your locale. Broken language preferences Users experience broken website language preferences in Firefox when the accept-lang preferences are left unchanged from the en-US default set of language preferences. This can lead to the user receiving web pages in a language they’re unfamiliar with by default, even when the web page is localized into their native language. It can be fixed in toolkit/chrome/global/intl.properties in the accept-lang setting. Broken searchplugins Users experiencing a broken searchplugin will receive a “website unreachable” message when they attempt to perform a search from their awesome bar or search bar. If you discover that a searchplugin is broken, please file a bug with the l10n-drivers. Broken hyperlinks Broken hyperlinks occur in a couple of different ways: When there are typos in the hyperlink markup, the markup is then exposed to users. When the hyperlink links to a site that is not obvious by the text it’s linked to (e.g., linking to the wrong support article according to the link’s context). These can only be discovered by using the website or software regularly and clicking each hyperlink available to ensure that they take the user to the intended website. What to do when you find an error while testing Congratulations! You’ve found a bug! No software is perfect and you’re very likely to find bugs while you test your localization. Once you’ve found a bug, you can either attempt to find the affected string in your community’s Pontoon projects or you can file a bug in Bugzilla for that language in Mozilla Localizations :: [your_locale]. Once a fix for that bug is landed, it’s important to test again to be sure that the issue has been resolved. For project-specific testing guides, please see these pages: Addons.mozilla.org (AMO). Firefox Desktop. Firefox for Android. Firefox for iOS. Focus. Mozilla.org. Snippets. Support.mozilla.org (SUMO). "},"tools/pontoon/":{"url":"tools/pontoon/","title":"Pontoon","keywords":"","body":"How to use Pontoon This document covers how to work with Pontoon from the user’s perspective, and use it to localize Mozilla projects online. If you’re interested in administrating Pontoon, please read these documents. User accounts and settings. Teams and projects. Search and filters. Translation user interface. How to translate. Translation resources. Example workflow. "},"tools/pontoon/users.html":{"url":"tools/pontoon/users.html","title":"User accounts and settings","keywords":"","body":"User accounts and settings Creating an account. User settings. User roles. Managing permissions. Creating an account Pontoon currently uses Firefox Accounts to manage users, so you will need to create an account in order to log in. To create an account on Pontoon, simply click on the menu icon in the top right corner and select Sign In. User settings User settings can be accessed by clicking the user avatar in the top right corner, and selecting Settings. Profile picture can be set on Gravatar, while the displayed name can be edited simply by clicking on it. Both Quality checks and Make suggestions are checkboxes. In the picture above Quality checks is disabled while Make suggestions is enabled. Quality checks (check for number of sentences, placeholders, HTML tags, punctuation, etc.) are performed when saving a translation. Make suggestions allows a translator or a manager to submit suggestions instead of translations. Both settings can also be changed directly from the gear menu (highlighted in orange) when translating strings. User settings are also accessible from this menu by selecting Change all settings. Preferred locales can be used to display a specific group of locales before others in the LOCALES tab when translating strings (highlighted in red). In this case, the user chose to display fr and es-ES before other translations. Since they’re both available the tab displays 2+72, meaning 2 preferred locales plus all others. User roles There are currently four user roles in Pontoon. Contributors can only submit suggestions. This is the default role for new users. Translators can submit translations directly in a specific locale, and review other contributors’ suggestions. Managers can perform the same actions as translators, but also manage other users and update their permissions. Admins can administrate Pontoon, e.g. adding or removing projects, and act as managers for all locales. Managing permissions A manager can upgrade other users’ permissions within a locale. To manage users, open the team page and select the CONTRIBUTORS tab (it will only be visible to managers and admins). By default there’s only a General section: permissions defined here will apply to all projects, but can be overridden by custom project permissions. To move a user to a different column simply hover the email address: arrows will appear to move the element to the left or right. Note that a user needs to log in at least once in Pontoon in order to upgrade their permission – simply having a Firefox Account is not sufficient. Use the SAVE button to store the configuration before leaving this window. By default, in the TEAM CONTRIBUTORS column will only appear users that have submitted suggestions before for this locale. You can click ALL USERS (highlighted in red) to display all existing users, then use the search field to narrow down the list. By clicking ADD CUSTOM PERMISSIONS PER PROJECT (highlighted in orange), it’s possible to add specific permissions for a project. This can be useful to make sure that only some users can submit translations for a specific project, for example if it’s maintained by one person. Note that it’s not possible to override managers, they will always be able to submit translations in any of the projects available for their locale. "},"tools/pontoon/teams_projects.html":{"url":"tools/pontoon/teams_projects.html","title":"Teams and projects","keywords":"","body":"Teams and projects The Teams page lists all locales that are enabled in Pontoon. From here you can access a specific Team page, where you’ll get a list of all projects enabled for the requested locale. Selecting a project from the Team page will take you to what is called the Localization page. From each locale’s Team page it’s also possible to request a project, that is asking to add that locale to a project already available in Pontoon, not asking to support localization for a brand new project. The Projects page lists all projects that are available in Pontoon. From here you can access the list of locales that are enabled for the requested project. This is called a Project page in Pontoon. By selecting a locale in the Project page you access the Localization page. The following diagram shows how these pages are organized and connected to each other: Team page You can access a team’s page by selecting it from the Teams page or by appending /YOUR_LOCALE_CODE to the URL, e.g. https://pontoon.mozilla.org/it for Italian. This is a screenshot of the Italian team page: The page header contains linguistic information about the current locale (plural form, writing direction, etc.), plus an indication of the overall status of completion and statistics. There are 4 tabs available (highlighted in red), 5 if you’re an admin or manager: Projects: a list of all projects enabled in Pontoon for this locale. Contributors: a list of active contributors with their statistics, filterable by time (all time, 1/3/6/12 months). Bugs: a list of open bugs for this locale, retrieved from Bugzilla. Info: information about the team. Team managers can edit it by clicking on the Edit button. Permissions: manage user permissions (see this document for details). Hovering a project in the list will replace the progress bar with a set of detailed statistics (untranslated strings, missing strings, etc.). Note that all these numbers are links, so you can use them to open the project with a filter already enabled, for example to display only missing strings. You can click on the number of total strings to access All Resources (i.e. all strings in all files) for this project. Requesting a project It’s possible to request a project from a locale’s Team page. Click on REQUEST MORE PROJECTS (highlighted in red), select the project you want to add and then click REQUEST NEW PROJECT (you need to select at least one project for the button to be displayed). An email will be sent to Pontoon’s administrators, and the localization driver in charge of the project will act on the request. Please note that: Some projects have a closed list of supported locales, meaning that you can’t request the project on Pontoon. Some projects can be requested but eventually not enabled, because of practical restrictions related to the project itself (e.g. lack of support for the locale in iOS). Project page You can access a project’s page by selecting it from the Projects page. This is a screenshot of the Mozilla.org project page: The page header contains useful information about the current project: Priority: it goes from 5 stars (highest priority) to 1 star (lowest priority). Deadline: set only for some projects, it indicates when the translation is due. Repository: link to the repository storing translations for this project. Resources: links to useful external resources. Custom links can be defined for each project. Contact person: localization driver in charge of this project. It also includes an indication of the overall status of completion and statistics across all enabled languages. There are 3 tabs available (highlighted in red): Teams: a list of all locales enabled in Pontoon for this project. Contributors: a list of active contributors with their statistics, filterable by time (all time, 1/3/6/12 months). Info: information about this project. Localization page You can access a project’s Localization page in two ways: By selecting it from the Team page. By selecting it from the Project page. The page header contains useful information about the current project (same as the Project page). There are 4 tabs available (highlighted in red): Resources: files available in the project. Contributors: a list of active contributors with their statistics, filterable by time. Unlike the tab available in the Team page, this only includes contributions to localization of the project for the current locale. Project info: information about the project. Team info: same content as the Info tab in the Team page. "},"tools/pontoon/search_filters.html":{"url":"tools/pontoon/search_filters.html","title":"Search and filters","keywords":"","body":"Search and filters Strings in Pontoon can be filtered by their state. A string can be in one of the following states: Missing: string is not available in the localized file and doesn’t have any translations or suggestions in Pontoon. Suggested: at least one suggestion has been submitted for this string. Note that, in this case, the translation only exists within Pontoon database, it’s not saved to the localized file. Translated: string has an approved translation. Fuzzy: string is marked as fuzzy in the localized file. Suggestions can be in two states: Unreviewed: string has been suggested, but not approved or rejected. Rejected: string has been reviewed and rejected by a translator. There are some extra criteria that can be used to filter strings: Untranslated: this will display strings that are either suggested, missing, or fuzzy. Basically, anything but translated. Once selected, you will also notice that those 3 filters are automatically checked. Unchanged: string is identical to the reference language (normally en-US). Unreviewed suggestions: this will display strings that have at least one unreviewed suggestion. Note that it will include strings in suggested, fuzzy and translated state, as long as they have unreviewed suggestions. Rejected: show strings that have rejected suggestions. By clicking on the funnel icon on the left, it’s possible to access filters. At this point it’s possible to: Click directly on the description of one of the filters. This will select and activate only this filter, and the search field placeholder will change accordingly. For example, clicking on Missing will show only missing strings, and the placeholder will read Search in Missing. Click on the icons for each filter, or the user avatars, in order to apply multiple filters. When you hover the icons, you will notice that they transform into checkmarks. A new button APPLY X FILTERS will appear at the bottom of the panel, where X is the number of active filters. In this case 3 filters are selected. To select a time range, you need to click EDIT RANGE, then either pick one of the defaults (30 days, 7 days, 24 hours, 60 minutes), or use the date picker (or slider) to adapt the range. Click on SAVE RANGE to store the range, then apply the filter. It’s possible to search within a project using the search field. Searches include strings, string IDs and comments. Note that searches take active filters into account, for example a search would be performed only on missing strings if that filter is selected. "},"tools/pontoon/ui.html":{"url":"tools/pontoon/ui.html","title":"Translation user interface","keywords":"","body":"Understanding Pontoon user interface Pontoon translation workspace Pontoon’s translation workspace features the list of strings in the left sidebar and the editing space on the right. Main toolbar The main toolbar allows you to navigate between projects without leaving the translation workspace. To navigate to another project, click on each item to open the drop-down menu and select the locale, project, and resource to work on. Then click Go. Note that the button will get a green background as soon as you change one of the items. Clicking All or Current in the drop-down menu might navigate away from the translation workspace: In the Locales section, All Teams links to the Teams page, while Current Team links to the Team page for the current locale. In the Project section, All Projects links to the Projects page, while Current Project links to the Project page for the current project. In the Resources section, All Resources will display string for all files in the projects, while Current Localization links to the Localization page. More information on how pages are organized in Pontoon is available in this document. An overview of the status of the selected resource is located to the right of the main toolbar. Translators can view the overview in detail by clicking it once. A project information icon is located to the right of the string overview. Translators can view information regarding the project, its priority level, and testing by clicking the icon. The notifications icon, represented by a bell, is located on the right side of the main toolbar. Translators will be notified of any important updates regarding the current project. By clicking the bell icon, translators can view notifications in more detail or see all active notifications. The profile menu is located at the far right of the main toolbar. Clicking the profile image will reveal the drop-down menu. From this menu, translators can perform several actions, like navigate to their profile page, download and upload translations, etc. For information about uploading and downloading translation check this document, for Machinery see here. Note that some profile menu items are restricted by user rights. Sidebar The sidebar displays the list of strings in the current project resource. Each string is displayed with the string status (i.e. Missing, Translated, etc.) identified by a colored square, the source string, and the approved translation or the most recent suggestion if available. At the top of the sidebar, the translator can access Pontoon’s search and string filters. Note that the sidebar toggles between the strings and the editing space when using the in-context editor. Translation workspace The translation workspace is where strings are translated. A translator can navigate sequentially by clicking the PREVIOUS or NEXT buttons located at the top of the workspace or by using keyboard shortcuts (ALT + arrow down or up). In the upper section of the workspace, the translator can view the source string, any comments regarding the string, and the resource path where the string is located. The editing space is located in the lower section of the workspace. The translator can edit the translation or suggestion in the text editor. To the lower-right side of the workspace, the translator can COPY the source string to the editor, CLEAR the area where translations are typed, and SUGGEST or SAVE the translation by clicking the corresponding button. To the lower-left side, a translator can access the workspace settings, keyboard shortcuts, and view the number of characters in the target and source string. When working on l20n files, the editing space will look a bit different: In the example above, the string has 2 attributes: value and title. Both are displayed in the source section (highlighted in red), and available as separate input fields in the editing area (highlighted in orange). By clicking the gear icon, the translator can activate or deactivate Quality Checks or Make Suggestions and navigate to their user settings. Note that access to certain settings may be restricted by user rights. By clicking the keyboard, a translator can view the workspace keyboard shortcuts. Pontoon workspace resources Built-in translation resources are located below the editing space. The three integrated resources are HISTORY, MACHINERY, and LOCALES. Learn how to use Pontoon’s translation resources in this document. Pontoon in-context editor Pontoon’s in-context editor displays the translatable strings as they appear on the web page, alongside the editing space. This means that translators can see where the source string appears and how the translation looks in real time. Pontoon’s in-context editor shows the strings in context on the right with the translation workbench on the left. When using the in-context editor, the sidebar features both string navigation and the editing space. To view the editing space, double click on a string. To return to string navigation, click BACK TO LIST at the top-left of the sidebar. "},"tools/pontoon/translate.html":{"url":"tools/pontoon/translate.html","title":"How to translate","keywords":"","body":"How to translate Translating strings: Submit a suggestion. Review a suggestion. Submit a translation. Translating using the in-context Editor. Performing batch actions on strings. Downloading and uploading translations. Translating strings Three actions can be performed on strings: submit a suggestion, review a suggestion, and submit a translation directly. Availability of these actions depends on user’s role. This document is simplified to demonstrate translation modes in Pontoon. Documentation includes specific pages for learning how to use Pontoon’s interface and translation resources. Submit a suggestion When a translator is in Suggest Mode, or doesn’t have permissions to submit translations directly, a blue SUGGEST button will be visible in the lower-right side of the editing space. To suggest a translation, the translator should simply input the translation to the editing space and click SUGGEST. Once the translator has suggested the translation, the string’s status will be updated from missing to suggested. This is indicated in the sidebar by the color of the checkbox next to the string. A notification will appear in the window, indicating that your translation has been saved. Note that a suggested translation exists only in the Pontoon database, not in the localized file or translation memories. Manually switch to suggestion mode Even if a translator has permissions to add translations directly, submitting suggestions to be reviewed helps ensure quality. To manually switch to Suggestion Mode, click the Settings gear to the lower-left side of the editing space and click the icon to the left of Make Suggestions so that it becomes a green circle. The SUGGEST button should then appear to the lower-right side of the editing space. A notification will appear in the window, indicating that Make Suggestions has been enabled. To switch to Review and Direct Translation Mode, go to the settings menu by clicking on the gear and turn off the Make Suggestions option. The green SAVE button should appear to the lower-right side of the editing space. Review a suggestion To review a suggestion, search for unreviewed suggestions or click on a suggested string in the sidebar. If the suggested string is an acceptable translation, either click on the SAVE button to the lower-right side of the editing space, or click on the checkmark icon to the right of the string (it becomes green when hovered). This will transform the suggested string into an approved translation, save the string to the database and to the localized file on the next sync operation. If the suggested string is not an acceptable translation, you can reject it by clicking the cross icon to the right of the string (it becomes red when hovered). Alternatively, you can provide a different suggestion: turn on Make Suggestions in settings. Once the SUGGEST button appears on the lower-right side of the editing space, edit the suggested string as appropriate and click SUGGEST. This will add your translation as a new suggested string in the Pontoon database but will not save the string in the localized file. To see the old and new suggestions, click on the history tab below the editing space. To learn about the history tab and other resources, check the Translation resources documentation. For more information about using the HISTORY tab, check this document. Submit a translation directly Note that it is always best practice to have a translation reviewed by another translator; however, if no reviewer is available, these instructions allow a translator to translate without review. To submit a translation directly, search for and click on any string in the sidebar. Ensure that the Make Suggestions option in settings is disabled. Then input the translation to the editing space and click SAVE. This will save your translation directly, without review, to the localized file. Translating using the in-context editor Note that only websites that have been enabled for in-context editing will display in context in Pontoon. To translate in context, find the string you want to translate in the in-context view and double click it, or click on the pencil icon on the top-left of the string. Hovering over the string that you want to translate will highlight that string in the sidebar and in the in-context view. Once you double click a string, the sidebar will display the editing space. Input your translation or review the suggestion and click SAVE or SUGGEST. Once your translation is saved, the editing space will move to the next string, and that string will be highlighted in the in-context view. To return to the list of strings in the sidebar, click BACK TO LIST at the top-left of the sidebar. Interactive website features will work in the in-context view. Some strings that you can see in the sidebar will not be visible in the in-context view until you activate the website feature. In the picture below, the translator has clicked on the hamburger to reveal a drop-down menu. Performing batch actions on strings Translators can perform mass actions on batches of strings by clicking on the square to the left of any string in the sidebar. When clicked, the square will show a checkmark and the editing space will show the mass action window. After selecting a string, it’s possible to hold SHIFT and click on another string to select a range of strings. At the top-left of the mass action window, the translator can return to the editing space by clicking on the x icon. To the right of the exit icon, the number of strings currently selected is displayed. At the top-right of the mass action window, the translator can select all of the strings in the sidebar. In the REVIEW TRANSLATIONS section, the translator can approve suggestions or reject suggestions for all selected strings. Upon clicking APPROVE ALL or REMOVE ALL SUGGESTIONS, the label of the button will be replaced with the number of affected translations. In the REPLACE IN TRANSLATIONS section, the translator can input a series of characters to search for, and a series of characters to use as a replacement. This is a basic find and replace feature that will work only on the selected strings. Note that mass actions are only available to users with translators rights. Downloading and uploading translations Pontoon features the ability to download and upload translations, including translation memories. To access these features, click on your user icon in the top-right section of Pontoon. Note that you must be in the translation workspace for the download/upload options to display in the dropdown menu. Anyone can download a translation memory (.tmx) and translations, while only translators can upload translations. When downloading translations: The resource currently selected is downloaded in its original format, it’s not converted in any way. If the project contains more than 10 files, download is performed file-by-file. For larger projects a ZIP of all files is downloaded. When you upload translations to Pontoon: Existing strings with matching translations will be ignored. New strings and new translations will be imported and attributed to the user uploading the file. "},"tools/pontoon/resources.html":{"url":"tools/pontoon/resources.html","title":"Translation resources","keywords":"","body":"Translation resources Pontoon features built-in access to different translation memories. These resources are available in the translation workspace and, for machinery, on a standalone web page. History tab The history tab shows all of the suggestions and translations that have been submitted for the current source string. In the tab, the number of available entries is visible alongside the HISTORY title. The history entries are located below the tab. On the left side, above the entry, the name of the translator is visible in gray (linking to their profile), while in green it’s displayed how long ago the entry was submitted (full date and time is available as a tooltip). Below this information, the translation or suggestion is displayed. To the right of the entry, icons indicate the state of each element: The green checkmark indicates that the translation has been approved. If both icons are gray, translation has been suggested but not reviewed yet. The red cross indicates that the translation has been rejected. The entire element will look opaque. If there are multiple suggestions for one string, it’s possible to use the SHOW DIFF link displayed on the right side of the suggestion: it will compare the selected suggestion to the first entry, highlighting in green all added text, in red all removed text. HIDE DIFF will display the original string. Machinery tab The Machinery tab shows possible translations from a variety of sources. These sources include: Pontoon’s internal translation memory. Transvision. Amagama. Microsoft Terminology. Bing Translator. In the tab, the number of available entries is visible alongside the MACHINERY title. Below the tab, there is a machinery search bar (highlighted in red). A translator can enter text into the search bar to search for any strings in the machinery resources that may be similar. The search does not need to be related to the current project string. Above the entry, a diff view between the current source string and the source string from the machinery resource is visible. Text highlighted in red indicates text that is present in the source string but not in the machinery string, while text highlighted in green indicates the opposite (text available only in the machinery string). To the right of the entry, the number in green shows the percent match between the machinery string and the source string. The higher the percentage, the more likely the machinery is to be useful. The machinery source is listed in gray. Upon clicking the gray text, the machinery source will be opened in a new window. The green superscript to the right indicates the number of matches for the entry in the translation memory source. Note that when using the machinery tab, entry source string may not match the project source string and translations may not be fluent under the context of the project string. Be aware of the meaning and purpose of each string when using the machinery tab. Stand-alone Machinery Pontoon machinery is also available as a stand-alone web page. To access the page, use the Machinery link available in the Profile menu, or the Machinery tab in the upper navigation displayed in some pages (e.g. Teams page or Projects page). To use the machinery, select the target locale from the dropdown menu to the right of the searchbar. Then input the English source string into the searchbar and press enter. This will display all matching machinery entries. Information is organized exactly as in the translation workspace. Locales tab The locales tab shows approved translations from Pontoon projects in other locales. Next to the LOCALES title, the number of available entries is visible. The number of preferred locales is in green, all other locales are listed in gray. To add a locale to the preferred locale list, access the user settings page. Entries in the LOCALES tab above the green line are preferred locales. Entries below the green line are not preferred locales. At the left of the entry, the translation for the source string in the selected locale is visible. At the right of the entry, the language name is visible in gray, while the locale code is displayed in green. The LOCALES tab is useful for seeing what general style choices are made by other localization communities. When encountering a difficult string, a translator can reference the methods that have been used by other languages in making a stylistic decision. Note that when using the LOCALES tab the translator should always opt for fluency in the working locale. Languages vary linguistically on many levels. The locales tab can be extremely useful, but should be used carefully, and rarely as the sole translation resource for translation. "},"tools/pontoon/workflow.html":{"url":"tools/pontoon/workflow.html","title":"Example workflow","keywords":"","body":"Example workflow AB workflow This workflow utilizes the full power of Pontoon’s online translation features. It assumes that at least two translators are available for the project; however, this workflow can be completed by a single translator in an AA workflow performing each phase or by multiple translators in an ABCn workflow repeating Phase 3. Phase 1: translation Translator A Log in to Pontoon. Browse to the project. Using filters select Untranslated to display only the strings currently missing a translation or marked as fuzzy). Access personal settings by clicking on the gear icon in the upper right corner, under the user image, then turn on Make suggestions.Note that new volunteers who have not yet been granted Translator rights will have Make suggestions enabled by default. For each string type a translation, then save it with the blue button SUGGEST. The string will be recorded under the HISTORY tab. Each string submitted shows name of the author and saving time. General notes: Rely on Pontoon’s translation resources to ensure consistency and make the translation process faster. If you’re using Firefox, make sure to have a dictionary installed for your language, and that spell checking is enabled in the translation text area. Phase 2: review suggestions Translator B Log in to Pontoon. Browse to the project. In filters select Unreviewed Suggestions, to isolate the strings previously suggested by another translator. Review the suggested strings. If suggestion is acceptable, confirm it as an approved translation by clicking the green SAVE button or the checkmark icon near the string in the HISTORY tab (it turns green when hovered). If the suggestion is not acceptable: Reject the suggestion by clicking on the cross icon near the string (it turns red when hovered). Switch to Suggest mode. Edit the translation in the editing space and click the blue SUGGEST button. Your version will not overwrite the translator’s work, but instead will appear at the top of the list under the HISTORY tab. Phase 3: implementing QA Translator A In the project, select Unreviewed Suggestions from the filter search. Then compare your entries with those of your reviewer for changes. Review the remaining strings: If you agree with the changes, confirm the reviewer’s version by clicking the green SAVE button or the blue circle near the string in the HISTORY tab. If you have not been granted saving privileges yet, simply do nothing and pass to the next one. If you would rather suggest an alternative, type it over, then hit the blue SUGGEST button. Then resubmit it to the reviewer, back in Phase 2, step 4. Reject suggestions that you don’t consider suitable. Repeat, switching translators, until a consensus is reached. "},"tools/mercurial/":{"url":"tools/mercurial/","title":"Mercurial tips","keywords":"","body":"Documentation for Mercurial How to trace a string back to a bug. "},"tools/mercurial/tracking_back_string_to_bug.html":{"url":"tools/mercurial/tracking_back_string_to_bug.html","title":"Using annotate","keywords":"","body":"How to identify the bug that introduced a string Sometimes it’s helpful to identify which bug introduced a specific string, for example to check if an issue was already reported, or find more background on a feature. Find the string The first step is to identify where the string is within the Mercurial repository, and the fastest way is to use Transvision. For example, if you want to know which bug introduced the string Would you like to let this site start a server accessible to nearby devices and people?, you can search for the string or the identifier (if you already know it). In the results, you can use the link in the en-US column to open the file in Mercurial. Find the bug At the top of the page there’s an annotate link that will display the changeset associated to each line. At this point you only need to search in the page for the string, hover the link on the leftmost column, and open the bug (if an active link is available in the commit message), or select the changeset link in the popup. The commit message will always have a bug reference, and you can then check dependencies and comments. Looking at older revisions This method doesn’t always work: sometimes a changeset only moves strings around, so you would need to repeat the process for an older revision of the file. At the top of the changeset, there’s a list of the modified files. Near each file there’s a revisions link. At this point you can pick an older revision of the file by opening the diff link for the changeset you’re interested in, and repeat the process by selecting annotate near the file you’re analyzing. "},"webprojects/":{"url":"webprojects/","title":"Web projects","keywords":"","body":"How to localize web projects This set of documentation contains basic information on localizing and testing web based projects. Addons.mozilla.org (AMO). Developer.mozilla.org (MDN). Fundraising. Snippets. Support.mozilla.org (SUMO). Thimble. "},"webprojects/amo.html":{"url":"webprojects/amo.html","title":"Addons.mozilla.org","keywords":"","body":"Addons.mozilla.org (AMO): how to localize and test Product at a glance AMO refers to https://addons.mozilla.org/. It is one of Mozilla’s biggest web properties, with 12 million users per month. The product consists of three key components that require localization: AMO server is the backend component of AMO. AMO frontend covers the top page of about:addons and the user-facing pages of addons.mozilla.org on Firefox for Android. Discovery Pane is home of curated add-ons available on about:addons. Product updates are deployed every Thursday to production. Localizable strings can be extracted on Tuesdays, strings localized by 5pm UTC each Tuesday go live on Thursday. To report a problem, you can use GitHub issues. Now let’s take a look of these components in greater details. AMO and AMO frontend addons-server Addons-server is the default front-end for desktop users of AMO. It is also the API backend and home to the developer hub and reviewer tools. addons-frontend Addons-frontend is the default frontend for mobile user-agents, and it will eventually replace the addons-server frontend for user-pages. Test the server and the frontend The strings will be available on Dev or Staging server at different times. See this section for details. Dev: https://addons-dev.allizom.org/ Staging: https://addons.allizom.org/ Production: https://addons.mozilla.org/ The hosts for the new frontend are the same as addons-server, except to display the new frontend, you either need: Click View mobile site in the footer (this will set a mamo cookie with the value on on your system). A Mobile user-agent string. Disco Pane app and editorial content The AMO Frontend (addons-frontend) repository is also home to the Disco Pane, short for Discovery Pane. This is the site that contains curated add-ons available by typing about:addons in the address bar. Another way to reach it is by clicking Tools in the menu bar, select Add-ons in the dropdown menu, and click Get Add-ons on the left panel. While this looks like it’s part of Firefox, it’s actually a remote web page. The content for the Disco Pane is available for translation in the AMO (addons-server) project. Test the Discovery Pane The strings will be available on Dev or Staging server depending on when they were committed. See this section for details. The hosts for the Disco Pane are: Dev: https://discovery.addons-dev.allizom.org/. Staging: https://discovery.addons.allizom.org/. Production: https://discovery.addons.mozilla.org/. The actual link is automatically generated and depends on the locale, operative system and version of Firefox. To get the correct production link for your system, you can open the Browser Console from Tools > Web Developer, copy and paste this code snippet in the input area at the bottom of the window, and press enter: Services.urlFormatter.formatURL(Services.prefs.getCharPref(\"extensions.webservice.discoverURL\").replace(\"%COMPATIBILITY_MODE%\", \"normal\")) This code reads the preference extensions.webservice.discoverURL from about:config, and replaces placeholders with the correct data for your system. For example: The original value of extensions.webservice.discoverURL is https://discovery.addons.mozilla.org/%LOCALE%/firefox/discovery/pane/%VERSION%/%OS%/%COMPATIBILITY_MODE%. If you’re using Firefox 57.0 in Italian on macOS, the resulting URL will be https://discovery.addons.mozilla.org/it/firefox/discovery/pane/57.0a1/Darwin/normal. To reach the Dev server, replace addons.mozilla in the domain with addons-dev.allizom, resulting in https://discovery.addons-dev.allizom.org/it/firefox/discovery/pane/57.0a1/Darwin/normal. Frequency of strings extraction and push schedule Newly added strings are extracted every week after tagging, which happens at 9am PST on Tuesdays. The strings will be on the dev server and ready for localization. For localized content: Dev server: once translations are committed into the repositories, they are visible on the dev server within 30 minutes (or as long as it takes to push the code). Staging server: master is tagged and pushed to staging weekly on Tuesday at around 9am PST. Production: the push usually starts at 9am PST every Thursday. "},"webprojects/mdn.html":{"url":"webprojects/mdn.html","title":"Developer.mozilla.org (MDN)","keywords":"","body":"Developer.mozilla.org (MDN): how to localize and test MDN is the acronym for Mozilla Developer Network. It hosts references and guides to Web technologies as well as Firefox at Mozilla. It attracts users around the globe. The localization communities are a key part of the Mozilla project. Their work in translating and localizing the MDN documentations helps people around the world develop for the open Web. MDN consists of three parts: The site user interface (or UI) strings that appear on almost all MDN pages to frame the main article content and provide navigation and user controls. The main body of MDN pages consists of references, guides, and tutorial articles. Localization is done directly on the web. Macro strings are the output by macro templates that construct certain kinds of navigation, messages, or generated structures. The strings currently live on GitHub, and changes can be done through pull requests. This document only covers the UI portion localizable in Pontoon. Localizing the strings The UI strings for MDN product live in Pontoon. The string changes are extracted and sent to Pontoon as part of the production push process. You can translate directly in Pontoon or download it as .po files and upload them back to Pontoon when done. Newly localized strings will be included in production updates. There is no sprint cycles. The staging and production sites are updated 1 - 3 times a week depending on product development. You should expect to see your new translations on production in 3-7 days. Pontoon will be synced up with MDN repository every 20 minutes. Updating localization strings is preferably done in Pontoon, and not through pull requests in the repository. Testing and reporting issues Staging and production pushes take place at the same time. Localized sites will have English strings for a few days before localization is caught up. There is no public developer server at the moment. Bugzilla is the best way to report localization issues. Communication channels For live communication, use IRC channels: #mdndev or #mdn. MDN Discussion Forum has recently moved away from mailing list to Discourse. Though there is no l10n category, MDN category is for discussing topics related to the MDN site. If you have a question, you can post it in the general MDN category. If you want to be notified for string changes, one way is to check Pontoon project dashboard for pending task. Another way is by subscribing to the notification list: click the Watch icon on the top of MDN GitHub repository page and be notified about pull requests and code changes. "},"webprojects/fundraising.html":{"url":"webprojects/fundraising.html","title":"Fundraising","keywords":"","body":"Fundraising website: how to localize and test donate.mozilla.org is our platform to collect donations. The main form is for Mozilla Foundation, but it also hosts a separate form for donations to Thunderbird. This website relies on third parties to handle payment. The localization of the payment system for debit/credit cards is managed directly by Stripe and it’s not possible to add or change translations. Testing Submitted translations are automatically deployed to the staging server, so you can test them a few minutes after they have been translated. Staging server: https://donate.mofostaging.net/​. Production server: https://donate.mozilla.org/. Testing the payment flow You may want to test the complete user journey on the website, but you don’t have to make an actual donation for that. Stripe has a test mode that is enabled on the staging server only. Simply use the payment info from this page on the staging server and you should be able to simulate a payment. For instance, you can select an amount of money, click on donate by credit/debit card then fill out the Stripe form with the testing info. Make sure errors are properly localized, as well as the page displayed when the donation has been successful. You should also receive a confirmation email in your language. Testing currency settings The first thing to check is that the website supports all the relevant currencies for your locale. You also want to make sure the default currency selected for your locale is the one that makes the most sense. Only one default currency can be set per locale and it’s not possible to rely on geolocation to determine the best one. If your language is relevant in more than one country, make sure the other currencies are also available in the drop down. Check that the currency formatting on the page is correct for your language. If it’s not correct, please file an issue. How to report an issue The preferred way is to file an issue on the donate.mozilla.org GitHub repository. "},"webprojects/snippets.html":{"url":"webprojects/snippets.html","title":"Snippets","keywords":"","body":"Snippets: localizing, testing and creating your own What is a snippet? A snippet is a small and often interesting piece of news, information or conversation. It is a type of in-product communications (IPC) channel that the Engagement team uses to deliver messages directly to Firefox users, to drive usage, inform about ongoing campaigns and initiatives, and build brand loyalty. These are some examples of the subjects used in snippets: product launches, new features, Mozilla Foundation content like yearly donations, Mozilla Foundation Advocacy campaign, Mozilla content, user tips, celebration of special days, etc. In a given month, the team has the opportunity to create up to 3 billion media impressions through snippets. Mozilla uses them for all sorts of purposes, to educate, inform, celebrate and delight. This is what a snippet looks like on Firefox browser: Which locales are supported? Currently only eight locales are supported by the team on a regular basis. They are: cs, de, es, fr, id, pt-BR, ru and zh-TW. Recently, the team also tested out RTL languages: ar, fa, he and ur. The process is entirely manual, thus it is not scalable to expand to other locales, at least not on a regular basis. See section below on how to make a special request for locales not on this list. How often are localized snippets requested and where is the project available? Snippets usually come on a monthly basis. Normally there is a lead time of 10-14 days between the request and the snippets being available in Firefox. Occasionally there are special requests outside of this cadence to support a product or feature launch for a particular market. Localizable files can be found on Pontoon under the Engagement project. The pending project is also listed on the team web project dashboard. Guidelines on localizing snippets Follow the snippets guidelines when localizing snippets. The tone should be QUAC (Quick, Untamed, Alert, Clever). Do not translate it, localize it! Usually the English copy is full of cultural references that may not apply to your local culture and is targeted to the wrong audience. Try to capture the essence of the message and make it relevant to your market. Read the comments for some messages that provide info on context, type of campaign and length limitation of the message. Collaborate with other community members. You may come up with something better than working alone. Check for spelling and grammatical errors. Snippets have short life cycle. Get it right before it reaches millions of users. Do not rush to complete the work and then never look at it again. Think through for few days before you consider it final. Report localizability issues on Bugzilla during the localization process. Issues include but not limited to: icons, character length, cultural or country relevancy, appropriateness, timing when a snippet is used. The snippets team will evaluate these issues and skip a snippet for a locale at a given launch altogether. Check due date of the task. Snippets is high priority and time sensitive. Where and when to test snippets? Currently, there is no staging server for localizers to preview the snippets or layout before they are scheduled to go live. Snippets usually go live as soon as a day after the due date, or as late as a few weeks later because they are scheduled against other priority messages. To see snippets, type about:home in the Awesome Bar, the current running snippets will be on display. A snippet can run between 4-7 days. Sometimes a set of snippets rotates within a given time frame, in other cases one snippet runs for a few days before it is replaced by another one. Take a peek of the currently running and scheduled snippets. It shows the country, the message and the schedule of a snippet. If you spot a mistake in a snippet, file a bug to the team right away. Specify language, current content, suggested correction, severity of the problem or the reason it is incorrect. And preferably, attach a screenshot. FAQ: process to make a special snippet request Even if your locale is requested on a monthly basis, you are welcome to come up with your own content that better fits your culture, country or language. If your language is not listed above and you would like to have a snippet created for special occasions, such as new product or feature launch, a major holiday or campaign, please follow these steps. How to create a good snippet? Leverage what is already written and localize it If creating your own content is challenging, feel free to leverage what was created by the snippets team. Browse through the snippets written this year so far, you may find a message that resonates to your particular market, product, feature launch or campaign. Create your own Writing snippets takes a lot of effort. Follow the same guidelines that the snippets team adhere to. Snippets should be to the point. Try writing your snippet then cut it down until you are left with a sentence that is quick, clever and delightful. A good snippet copy has a few of the following qualities and characteristics: Tangible: quality that can be easily measured. Lenght: the ideal snippet is between 80 and 130 characters. Think of a tweet, omit needless words. Readability: short concise words worked for Hemingway, they’ll work just fine for you. Keep the 3 syllable words and technical jargon to a minimum. Call to action - CTA (Occasional): you don’t always need to blatantly tell people what to do, but sometimes you do. Grammar: do your best to catch mistakes, there is a chance that all checkpoints will miss it but 100 million people surely won’t. Support graphic: all simple snippet copy is accompanied by an icon. Your icon and copy should work in unison. Select the icon from this gallery (need to request for access) that best supports the message. Here are some examples of matching the graphics with the tones of the messages. Intangible: quality that is recognized but difficult to quantify. Quikc: get to the point with short words and sentences. Clever: find humor, irony and wordplay. Reference modern life. Alert: ready to offer tips, advice and guidance like a trained concierge. Untamed: be quirky. Do and say things no other brand would. In addition to the guidelines mentioned above in terms of localizing a snippet, it is very important that this is the result of a team collaborative effort. The proposed snippet should come in both target language and in English so the snippets team can understand what is being conveyed. Try to submit multiple variant snippets of the same message, or multiple snippets of different messages if you can, to lower the chances of having some snippets rejected. Can I use external icons and URLs in my snippet? You can pull icons from the Firefox emoji bank by specifying the icon number. This is the recommended list of icons to choose from. If you can’t find anything in the bank that fits, you can suggest icon ideas or even attach a custom icon that respects the guidelines. Suggesting new icons will increase review and approval time. Unless specified, the only non-Mozilla pages we can link to from snippets are Wikipedia pages. File a request Once a snippet is formalized, you can file a Snippets bug request for review and approval. Specify the language, provide copy of the message in target language and in English as reference and choice of icon, suggest preferred timeline to run the snippet. Make sure to include a link to use in the proposed snippet. What is the lead time for a snippet request? The team needs a minimum of two weeks if snippet needs to appear in language other than English in your country. This assumes that the snippet doesn’t require much revision. What is the typical snippet review cycle for approval? Review process takes about a week. LCM (Life Cycle Management) team needs to approve the snippet before it moves to the Firefox stakeholders. The stakeholders could include functions from Firefox product, UX, creative, copywriter, etc. How long does a snippet run? A single snippet usually runs between 4 and 7 days. If you have a topic or campaign that lasts longer, please provide multiple snippet variations. Can a community provide several snippets to run at a given time? Yes, it can. It is always nice to have multiple snippets. Multiple snippets increase the chance of a few snippets being able to make it through the review process. If several of our snippets are approved for a single language, how are they run? Snippets of the same language usually cycle through during a given window. Normally a few snippets are running at any given time. Occasionally, one snippet is given 100% rotation for a short period in order to hit a goal. This usually applies to fundraising snippets or mobile promotion snippets. "},"webprojects/sumo.html":{"url":"webprojects/sumo.html","title":"Support.mozilla.org (SUMO)","keywords":"","body":"Support.mozilla.org(SUMO): how to localize and test SUMO, short for SUpport.MOzilla.org, is a knowledge base site, providing support to Mozilla product users. More than half of all Firefox users speak a language other than English. Mozilla depends on contributors to make support available to people around the globe. SUMO consists of two parts: User interface (or UI), such as navigation and buttons. Support articles, either used to troubleshoot issue or as knowledge base for Mozilla products. This document only covers the UI portion localizable in Pontoon. Localizing the strings There are two active components in Pontoon that make up the product: LC_MESSAGES/djangojs.po contains strings for the JS bits of the platform. LC_MESSAGES/django.po contains the majority of strings in the SUMO product. SUMO is made up by several file types. In order to minimize revision and get translation right the first time, the key is to get the context right. Look for clues or ask others for help: String comments: in Pontoon they’re displayed above the area where you can enter your translation for a string. They always include a reference to the code where the string is used, and you can use this information to search for context in the Kitsune GitHub repository. The SUMO l10n forum. But first thing first, you need to create a SUMO account in order to participate in the discussions in the forum. Localized strings in Pontoon will be synced up with sumo-l10n on GitHub every 20 minutes, making the repository the source of truth. Ignore these legacy components: LC_MESSAGES/buddyup.po contains strings for mobile-centric 1-to-1 support project. LC_MESSAGES/yaocho.po contains strings for the mobile version of the support knowledge base. Testing On Thursdays, SUMO developers perform synchronization so localized content is ready on staging for testing. On Mondays, SUMO developers perform synchronization so: New strings from code and database edits are merged into the sumo-l10n repository and become available in Pontoon for translation. Translated strings from sumo-l10n are pushed to production. There are three ways to test the product: Staging server: https://support.allizom.org​. Production server: http://support.mozilla.org/. Locally: if you want to test your update in a fast and independent way, you should install Kitsune on your computer. Testing on production Localization updates are pushed on Thursdays on staging for review in context, and on Mondays on production. Either way, the SUMO team relies on contributors to find issues and report bugs that are usually fixed at a timely manner. Testing locally Kitsune’s codebase is currently not ready for a large audience, and the SUMO team has very limited resources to support local installs. Unless you are technical and self sufficient, you are strongly advised to use Pontoon and staging server to preview your localization work. If you choose to give local install a try, follow the step by step instructions on testing localized SUMO locally, including local installation of Kitsune, file compilation and steps to commit changes to repository. FAQ For any additional questions not covered here, you can contact Michał. How often are new strings added? Is there a sprint? No, there are no sprints. Strings are added at as needed basis. Whenever a release or change is required, new strings will be added to both Pontoon and Kitsune on Mondays. How do I participate in the SUMO l10n forum? To be part of the SUMO community, you need to create a SUMO account, which allows you to write in the community l10n forum and localize SUMO articles. This is separate from the account used to log into Pontoon in order to localize SUMO product. Are there email communications when new strings are added? Only when there is a release or a major change will there be communications to localizers through mailing list, private messages, and the SUMO l10n forum. The Pontoon dashboard is the best way to check for pending tasks. What are the ways to report an issue? The best place to report issues is by filing bugs to SUMO. This is the quickest way to have a problem resolved. Alternatively, you can report a problem through the SUMO l10n forum. You can also raise questions through web projects mailing list, in the #sumo channel on IRC, and other social channels. In the end, issues identified will be tracked through Bugzilla. It is not recommended to file issues on GitHub sumo-l10n. "},"webprojects/thimble.html":{"url":"webprojects/thimble.html","title":"Thimble","keywords":"","body":"Thimble: how to localize and test Thimble is an online code editor that helps anyone learn HTML, CSS and JavaScript by creating and remixing Web projects. For instance it can be used by educators around the world to teach web skills to kids, so the localization plays an important role. Thimble is enabled for in-context translation, for a few pages. Some parts like the editor are not available, but can be tested through the staging server. Testing Your translations are automatically deployed to the staging server, so you can test them a few minutes after they have been translated. Staging server: https://bramble.mofostaging.net/​. Production server: https://thimble.mozilla.org/. Locally: in case you want to test your translations off-line, you can install Thimble locally. Areas that can’t be localized Some parts of the project can’t be localized yet, such as Thimble projects themselves or the project listing displayed on the home page. This listing is dynamic and projects can be featured for a short period of time for a specific event. The signup and sign-in pages can’t be localized either. The video will be available for subtitling through YouTube once it’s updated with the latest Thimble features. How to report an issue The preferred way is to file an issue on the Thimble GitHub repository. "},"misc/glossary.html":{"url":"misc/glossary.html","title":"Glossary","keywords":"","body":" Glossary Fuzzy fuzzy is an internal state available only if the source file is a gettext (.po) file. A string can be marked as such in a few cases: The reference text changed after the string was already translated. The string has been manually marked by translators because it needs review. New strings were merged in the localized files, enabling the option to match existing translations (also called “fuzzy matching”). In all these cases a translation exists in the file, but is marked as fuzzy (equivalent to “need review”) and not used by the website or application. For more information, read the documentation about Fuzzy Entries in gettext. "},"misc/l10n_resources.html":{"url":"misc/l10n_resources.html","title":"l10n resources","keywords":"","body":"Using l10n resources while translating What are l10n resources L10n resources are used to ensure consistency of translation and localization at specific levels of a document or set of documents. These levels are: Word or phrase level (terminology). Sentence or string level (translation memory). Whole document or project level (style guides). Terminology Terminology resources define specific words or phrases and their translated equivalents to be used in the translation process. These resources often go beyond providing one-to-one bilingual equivalents. They can include metadata about a particular term, including a monolingual definition, part of speech, context, images, and other relevant metadata that helps the translator understand the concept behind the term. A term belongs in the approved term base (terminology database) when it appears regularly, has a singular meaning in a particular context, or is specialized in nature. Term bases are useful in helping translators to maintain meaning and consistent terms across multiple projects. They’re especially useful in collaborative translation environments that involve multiple projects with similar content and audiences. Term bases also help to ensure that any new collaborators can translate effectively in a shorter period of time. Using term bases ensures that a user’s experience is consistent across platforms, products, and content types. For example, terminology used in the Firefox desktop UI also appears in Firefox for Android, Firefox for iOS, and SUMO documentation. If a user encounters a problem in Firefox, they will expect to find a solution by searching SUMO with the text from the Firefox desktop user interface. Consistent terminology use ensures a holistically consistent user experience for such cases. Translation memory Translation memory is a mechanism that reuses previously translated segments (i.e., strings, sentences, etc.). These segments are stored in a database as a key-value pair, with the source language segment as key and the target language segment as its value. Algorithms like the Levenshtein Distance are then used to compare an untranslated segment to the database of source language segments. If there’s a perfect match, the target language segment is returned for the translator to reuse. If there are partial matches (i.e., fuzzy match), they are returned as suggestions. Translators can then post-edit the closest matching suggestion without needing to repeat fully translating the segment. Translation memory is useful in helping translators to translate more in a shorter amount of time. For example, it allows source content authors to make regular updates to source content without causing translators to treat these updates as untranslated segments. As with term bases, translation memory also ensures consistency between similar projects and collaborative translation projects with rotating contributors. Style guides Style guides establish the norms for translating a full document or project. It establishes norms for many of the following topics: Style. Tone. Grammar and spelling resources. Instructions on handling cultural references. Word forms (e.g., plurals, abbreviations). Language and culture-specific units (e.g., dates, numerals, currency). Criteria for identifying “Do-Not-Translate” content in a project. Style guides help translators to know to address their audience (or users) in the target language when translating. They ensure consistency between translators in all of the above-mentioned topics. In a collaborative translation environment, they serve as the standard against which peers can review and correct translations from both new and old translators. When are they used in the l10n process Term bases and translation memory are best used within the translation environment (e.g., Pontoon). These computer-assisted translation (CAT) tools are designed to make use of these resources as a translator is in the process of translating a project. Style guides are used primarily as a point of reference. A new translator should always begin their contributions by studying the style guide and refer back to it regularly while translating when they have questions. Reviewers use style guides to ensure that new translations meet the quality standards established in the style guide. "},"misc/community-marketing-kit.html":{"url":"misc/community-marketing-kit.html","title":"Community marketing kit","keywords":"","body":"Guide to promoting Firefox in your language - a community marketing kit For every community, new or well established, it is always exciting to reach the milestone when the localized Firefox is ready for the first time or a major release. It takes months of translation, testing and QA to get to the finish line. However, the work is not done. Now comes the challenge of promoting the product in your language and sharing it by word of mouth. This guide is created to support a major launch event, not only for a new Firefox launch, it also addresses some of the most frequently asked questions about promoting your localized Firefox and other Mozilla products. Messages Source mozilla.org! Localize it! The site is having a makeover leading up to the autumn launch of the new Firefox. In addition to the new look and feel, there is a lot of new content, and tone is less formal and more fun. Translate these new pages, you will have all your key messages already. Snippets and emails: Only eight locales are supported on a regular basis. The Snippets team is not ready to expand to more locales due to the fragile and manual process for pushing them live. You can leverage the content you see fit and publish them on your community social channels. We are in discussion with the Snippets team to support occasional request for locales not regularly supported. Check Snippets documentation for details. Other marketing messages: Occasionally we come across interesting messages through Mozilla social channels. The l10n drivers will share them through familiar communication channels such as Facebook, Telegram, and Twitter. Key messages of the new Firefox: Firefox is fast, modern, and fun. Differentiators between Firefox and the competitors. Big vs. small Bloated vs. lean Being watched vs. having more privacy Ads vs. content Targeted audience - attract, inform and convert Switch English user to target language Conscious choosers - users who are brand loyal New and non-users - users who are new to Firefox High value users - users who choose products and service that represent their values Lapsed users - users who have not used Firefox for a while because of its perceived image and performance Graphic Assets Guidelines and downloadable [designlanguage.mozilla.org] With the new logo and the new look, we now have a new brand guideline at a new home. If you have resources to create your own printable file, make sure to read the guideline on the DOs and DONTs and adhere to the guidelines and suggestions closely. Designs If you do not have resources in tools or talents to create your own images, you can do two things: Check to see if what you need is already available at OpenDesign github repository. We will add more images and templates over time. Click through some of the open and closed issues to see the kind of work the team has covered. If you don’t find what you need or you want to have a customized one, here are the steps: File an issue to the OpenDesign team Specify your need: image, logo, with text, with localized text, your purpose. Specify size and color. State the deadline. The team delivers the finished work to you after a few iterations. Spreading the words Here are a few channels to spread the words of the new Firefox launch. The following are mere suggestions. They may or may not be applicable or appropriate for every market. Social media: Instagram, Facebook, Twitter, Blogs, major local brand social media. Community: organize meetup, attend other tech meetups, be a speaker. Organization: team up with other tech non-profit or open source organizations, schools, universities, and libraries to discuss web or tech literacy; bulletin board. Mozilla: Mozillagram will share photos from events. Below is the process to get your photos published: Email request a week in advance to Sierra Read, in charge of social media. Once the community lead is granted access, the person or the group is allowed to take over the account for a few days at a time. During this period, they have direct access and are responsible for posting. With advance planning, Snippets team will push localized snippets outside of the regularly supported locales. Check out the process in getting one published. Mozilla l10n blog, monthly report. Guidelines to organizing events Large events are often difficult to organize, expensive, and less effective at spreading the word. Here are a few things to keep in mind when organizing a local event: To organize an event, reach out to your local Reps. The Reps are experienced in organizing events, especially the logistics. To fund the event, send request to the l10n team in advance. The l10n-drivers will evaluate and potentially set aside a small budget for it. For new locale launch, in addition to the above steps: L10n-drivers will send gear (pens, stickers) to distribute for the events. L10n-drivers will send t-shirts to the community localizers. "}}